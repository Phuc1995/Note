assert  import static org.mockito.Matchers.*;


       DiscoveredNetworkObject parentLink = mock(DiscoveredNetworkObject.class);
        PortContext portContext = mock(PortContext.class);
        DslamContext mockedDslamContext = mock(DslamContext.class);
        when(portContext.getDslamContext()).thenReturn(mockedDslamContext);
        
        RetrievalManager retrievalManager = mock(RetrievalManager.class);
        
        Asam dslam = mock(Asam.class);
        when(dslamContext.getDslam()).thenReturn(dslam);
        
        boolean bidmRequired = false;
        when(dslam.isBidmConnectionRequired()).thenReturn(bidmRequired);
        
        String neTye = "interface_interfaces";
        NodeVersionMeta mockNodeVersion = mock(NodeVersionMeta.class);
        when(dslamContext.getNodeVersion()).thenReturn(mockNodeVersion);
        When(dslamContext.getNodeVersion().getNodeTypeDescription()).thenReturn(neType);
        MObjectId moId = new MObjectId("/elementNr=7/rackNr=1/subrackNr=1/slotNr=10/portNr=1/ontNr=7");
        when(parentLink.getMObjectId()).thenReturn(moId);
        MObjectType systemType = MObjectType.createNeModel(neType, neVersion);
        
        String label = "label";
        MObject neMo = mock(MObject.class);
        MObjectId neId = new MObjectId("/elementNr=1");
        DiscoveredNetworkObject dno = new DiscoveredNetworkObject(neMo, neId);
        interfaceAtt.addDiscoverdLabel(label, dno);
        Set<DiscoveredNetworkObject> actual = interfaceAtt.getDiscoverdLabel(label);
        assertEquals(1, actual.size());
        assertEquals(dno, actual.toArray()[0]);
        
        AxsUtilObject axsUtilObject = mock(AxsUtilObject.class);
        AxsUtilProvider.setAxsUtil(axsUtilObject);
        
        LinkToCFMEndPointIACMTest
        SubscriberSubInterfaceToSubscriberForwarderPortExplorerTest
        InterfacesAttributeValueProviderTest
        
        MObjectType neMObjectType = MObjectType.createNeModel("iSAM", "5.5", "ne");
        
        MObjectType ifMObjectType = MObjectType.createNeModel("iSAM", "5.5", IsamAnvAxsResource.AXS_INTERFACE_INTERFACES);
        MObject ifMObject = mock(MObject.class);
        when(CommonUtils.getManagedObject(portContext, ifMObjectType)).thenReturn(ifMObject);
        when(provider.getBulkIdentifierAttributes(portContext, retrievalManager)).thenReturn(bulkMap);
        
        ObjectAlreadyFoundLinkRelationStrategyTest
        
        IsamAnvNameToIdResolverWithDefaultValue 
        AbstractDiscoveredNetworkObjectExplorer 
        AbstractInterfaceToInterfaceLinkRelationStrategy(i)
        FastDslToForwarderLinkRelationStrategy 
        NetworkForwarderPortToNetworkSubInterfaceExplorer 
        SubInterfaceToForwarderPortLinkRelationStrategyTest
        SubscriberForwarderPortToForwarderExplorerTest
        
        IsamAnvNameToIdResolverWithDefaultValueTest(100%)
        AbstractDiscoveredNetworkObjectExplorerTest(50%)
        AbstractInterfaceToInterfaceLinkRelationStrategyTest(80%)
        FastDslToForwarderLinkRelationStrategyTest(99%)
        FastDslToPtmLinkRelationStrategyTest(100%)
        ForwarderToNetworkForwarderPortsExplorerTest(95%)
        NetworkForwarderPortToNetworkSubInterfaceExplorerTest(85%)
        PtmToSubscriberSubInterfaceLinkRelationStrategyTest(100%)
        SubInterfaceToForwarderPortLinkRelationStrategyTest(100%)
        SubscriberForwarderPortToForwarderExplorerTest(100%)
        IsamAnvNameToIdResolverWithDefaultValueTest(99%)
        
        
        